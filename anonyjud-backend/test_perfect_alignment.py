#!/usr/bin/env python3
"""
Test de l'alignement parfait pour l'anonymisation PDF directe
"""

import os
import sys
import logging
from pathlib import Path

# Ajouter le r√©pertoire parent au path pour importer les modules
sys.path.append(str(Path(__file__).parent))

from app.anonymizer import anonymize_pdf_direct, deanonymize_pdf_direct

# Configuration du logging
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

def test_perfect_alignment():
    """Test l'alignement parfait et le respect des polices originales"""
    print("üéØ Test de l'ALIGNEMENT PARFAIT pour l'anonymisation PDF directe")
    print("=" * 70)
    
    # Donn√©es de test
    tiers_test = [
        {
            "numero": 1,
            "nom": "HUISSOUD",
            "prenom": "Louis",
            "adresse": "244 Mont√©e du Mollard",
            "code_postal": "38790",
            "ville": "CHARANTONNAY"
        },
        {
            "numero": 2,
            "nom": "IMBERT",
            "prenom": "Arnaud",
            "adresse": "256 Mont√©e du Mollard",
            "code_postal": "38790",
            "ville": "CHARANTONNAY"
        },
        {
            "numero": 3,
            "nom": "GAUTHIER",
            "prenom": "Guylaine",
            "adresse": "256 Mont√©e du Mollard",
            "code_postal": "38790",
            "ville": "CHARANTONNAY"
        },
        {
            "numero": 4,
            "nom": "THOIZET",
            "prenom": "Jacques",
            "adresse": "61, Quai Riondet",
            "code_postal": "38205",
            "ville": "VIENNE"
        }
    ]
    
    # Cr√©er un fichier PDF de test si n√©cessaire
    pdf_file = "test_data.pdf"
    if not os.path.exists(pdf_file):
        print("üìÑ Cr√©ation d'un fichier PDF de test...")
        from create_test_pdf import create_test_pdf
        create_test_pdf()
    
    print(f"üìÑ Fichier de test: {pdf_file}")
    
    try:
        # Lire le fichier PDF
        with open(pdf_file, 'rb') as f:
            pdf_content = f.read()
        
        print(f"üìä Taille du PDF original: {len(pdf_content)} bytes")
        
        # Test d'anonymisation avec alignement parfait
        print("\nüéØ Anonymisation avec ALIGNEMENT PARFAIT...")
        print("   ‚Ä¢ Pr√©servation exacte de la position originale")
        print("   ‚Ä¢ Respect des polices originales")
        print("   ‚Ä¢ Traitement coh√©rent des lignes compl√®tes")
        print("   ‚Ä¢ √âlimination du centrage artificiel")
        
        anonymized_content, mapping = anonymize_pdf_direct(pdf_content, tiers_test)
        
        print(f"üìä Taille du PDF anonymis√©: {len(anonymized_content)} bytes")
        print(f"üè∑Ô∏è  Nombre de balises g√©n√©r√©es: {len(mapping)}")
        
        # Afficher les balises g√©n√©r√©es
        print("\nüìã Balises d'anonymisation g√©n√©r√©es:")
        for original, anonymized in mapping.items():
            print(f"  ‚Ä¢ '{original}' ‚Üí '{anonymized}'")
        
        # Sauvegarder le PDF anonymis√©
        anonymized_file = "test_perfect_alignment_anonymized.pdf"
        with open(anonymized_file, 'wb') as f:
            f.write(anonymized_content)
        print(f"üíæ PDF anonymis√© sauvegard√©: {anonymized_file}")
        
        # Test de d√©-anonymisation avec alignement parfait
        print("\nüéØ D√©-anonymisation avec ALIGNEMENT PARFAIT...")
        deanonymized_content = deanonymize_pdf_direct(anonymized_content, mapping)
        
        print(f"üìä Taille du PDF d√©-anonymis√©: {len(deanonymized_content)} bytes")
        
        # Sauvegarder le PDF d√©-anonymis√©
        deanonymized_file = "test_perfect_alignment_deanonymized.pdf"
        with open(deanonymized_file, 'wb') as f:
            f.write(deanonymized_content)
        print(f"üíæ PDF d√©-anonymis√© sauvegard√©: {deanonymized_file}")
        
        # Analyser les polices utilis√©es
        print("\nüîç Analyse des polices utilis√©es...")
        
        try:
            import fitz
            
            # Analyser les polices du document original
            doc_original = fitz.open(stream=pdf_content, filetype="pdf")
            original_fonts = set()
            for page in doc_original:
                for block in page.get_text("dict")["blocks"]:
                    if "lines" in block:
                        for line in block["lines"]:
                            for span in line["spans"]:
                                if span["font"]:
                                    original_fonts.add(span["font"])
            doc_original.close()
            
            # Analyser les polices du document anonymis√©
            doc_anonymized = fitz.open(stream=anonymized_content, filetype="pdf")
            anonymized_fonts = set()
            for page in doc_anonymized:
                for block in page.get_text("dict")["blocks"]:
                    if "lines" in block:
                        for line in block["lines"]:
                            for span in line["spans"]:
                                if span["font"]:
                                    anonymized_fonts.add(span["font"])
            doc_anonymized.close()
            
            print(f"üìù Polices dans le document original: {sorted(original_fonts)}")
            print(f"üìù Polices dans le document anonymis√©: {sorted(anonymized_fonts)}")
            
            # V√©rifier la coh√©rence des polices
            fonts_preserved = len(original_fonts.intersection(anonymized_fonts))
            fonts_total = len(original_fonts)
            print(f"üìä Polices pr√©serv√©es: {fonts_preserved}/{fonts_total}")
            
            if fonts_preserved == fonts_total:
                print("‚úÖ Toutes les polices originales ont √©t√© pr√©serv√©es!")
            else:
                print("‚ö†Ô∏è Certaines polices ont √©t√© remplac√©es par des √©quivalents")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur lors de l'analyse des polices: {str(e)}")
        
        # V√©rification du contenu
        print("\nüîç V√©rification du contenu...")
        
        try:
            import fitz
            
            # Texte original
            doc_original = fitz.open(stream=pdf_content, filetype="pdf")
            text_original = ""
            for page in doc_original:
                text_original += page.get_text()
            doc_original.close()
            
            # Texte anonymis√©
            doc_anonymized = fitz.open(stream=anonymized_content, filetype="pdf")
            text_anonymized = ""
            for page in doc_anonymized:
                text_anonymized += page.get_text()
            doc_anonymized.close()
            
            # Texte d√©-anonymis√©
            doc_deanonymized = fitz.open(stream=deanonymized_content, filetype="pdf")
            text_deanonymized = ""
            for page in doc_deanonymized:
                text_deanonymized += page.get_text()
            doc_deanonymized.close()
            
            # V√©rifier que les balises sont pr√©sentes
            balises_trouvees = 0
            for balise in mapping.values():
                if balise in text_anonymized:
                    balises_trouvees += 1
            
            print(f"‚úÖ {balises_trouvees}/{len(mapping)} balises trouv√©es dans le texte anonymis√©")
            
            # V√©rifier que les valeurs originales sont restaur√©es
            valeurs_restaurees = 0
            for original_value in mapping.keys():
                if original_value in text_deanonymized:
                    valeurs_restaurees += 1
            
            print(f"‚úÖ {valeurs_restaurees}/{len(mapping)} valeurs restaur√©es dans le texte d√©-anonymis√©")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur lors de la v√©rification du contenu: {str(e)}")
        
        print("\nüéâ Test de l'alignement parfait termin√©!")
        print("=" * 70)
        print("üéØ Am√©liorations apport√©es:")
        print("   ‚Ä¢ Position exacte pr√©serv√©e (pas de centrage artificiel)")
        print("   ‚Ä¢ Polices originales respect√©es")
        print("   ‚Ä¢ Traitement coh√©rent des lignes compl√®tes")
        print("   ‚Ä¢ √âlimination des d√©calages de retrait")
        print("\nüìã V√©rification visuelle recommand√©e:")
        print(f"   1. Ouvrir {anonymized_file} ‚Üí V√©rifier l'alignement parfait")
        print(f"   2. Ouvrir {deanonymized_file} ‚Üí V√©rifier la restauration exacte")
        print("   3. Comparer avec le document original pour confirmer l'alignement")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {str(e)}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = test_perfect_alignment()
    sys.exit(0 if success else 1) 