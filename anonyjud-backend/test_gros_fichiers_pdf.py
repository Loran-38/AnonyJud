#!/usr/bin/env python3
"""
Test des am√©liorations pour gros fichiers PDF.
Ce script teste les diff√©rentes m√©thodes d'anonymisation avec simulation 
de fichiers volumineux et surveillance m√©moire.
"""

import sys
import os
import time
import psutil
import gc

# Ajouter le r√©pertoire parent au path pour importer les modules
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.anonymizer import (
    anonymize_pdf_with_redactor, 
    anonymize_pdf_enhanced_pipeline,
    anonymize_pdf_direct
)
import logging

# Configuration du logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def get_memory_usage():
    """Retourne l'usage m√©moire actuel en MB"""
    process = psutil.Process(os.getpid())
    return process.memory_info().rss / 1024 / 1024

def create_large_test_pdf(target_size_mb=10):
    """
    Cr√©e un PDF de test avec beaucoup de contenu pour simuler un gros fichier.
    """
    try:
        from reportlab.pdfgen import canvas
        from reportlab.lib.pagesizes import A4
        from io import BytesIO
        
        print(f"üìÑ Cr√©ation PDF de test cibl√©: {target_size_mb}MB")
        
        buffer = BytesIO()
        c = canvas.Canvas(buffer, pagesize=A4)
        
        # Calculer combien de pages approximativement
        pages_needed = max(10, target_size_mb // 2)  # Estimation grossi√®re
        
        # Donn√©es de test avec les tiers
        tiers_test = [
            {
                "numero": 1,
                "nom": "HUISSOUD", 
                "prenom": "Louis",
                "adresse": "123 Rue de la Paix",
                "ville": "Paris",
                "code_postal": "75001",
                "telephone": "01 23 45 67 89",
                "email": "louis.huissoud@example.fr"
            },
            {
                "numero": 2,
                "nom": "MARTIN",
                "prenom": "Sophie", 
                "adresse": "456 Avenue des Champs-√âlys√©es",
                "ville": "Lyon",
                "code_postal": "69001",
                "telephone": "04 56 78 90 12",
                "email": "sophie.martin@test.com"
            }
        ]
        
        for page_num in range(pages_needed):
            if page_num > 0:
                c.showPage()
            
            c.setFont("Helvetica", 12)
            y_position = 750
            
            c.drawString(100, y_position, f"PAGE {page_num + 1} - DOCUMENT DE TEST VOLUMINEUX")
            y_position -= 40
            
            # R√©p√©ter le contenu plusieurs fois par page pour augmenter la taille
            for repeat in range(20):  # 20 r√©p√©titions par page
                for i, tier in enumerate(tiers_test):
                    c.drawString(100, y_position, f"R√©p√©tition {repeat+1} - Tiers {i+1}:")
                    y_position -= 15
                    c.drawString(120, y_position, f"Nom: {tier['nom']} {tier['prenom']}")
                    y_position -= 12
                    c.drawString(120, y_position, f"Adresse: {tier['adresse']}")
                    y_position -= 12
                    c.drawString(120, y_position, f"Ville: {tier['ville']} {tier['code_postal']}")
                    y_position -= 12
                    c.drawString(120, y_position, f"Contact: {tier['telephone']} - {tier['email']}")
                    y_position -= 15
                    
                    # Ajouter des donn√©es sensibles
                    c.drawString(120, y_position, f"Date naissance: 15/03/1985, NIR: 123456789012345")
                    y_position -= 12
                    c.drawString(120, y_position, f"Carte: 1234 5678 9012 3456, R√©f: AF-2024-{page_num:06d}")
                    y_position -= 20
                    
                    if y_position < 50:  # Nouvelle page si plus de place
                        c.showPage()
                        y_position = 750
            
            if page_num % 10 == 0:
                print(f"  Pages cr√©√©es: {page_num + 1}/{pages_needed}")
        
        c.save()
        pdf_content = buffer.getvalue()
        buffer.close()
        
        actual_size_mb = len(pdf_content) / 1024 / 1024
        print(f"‚úÖ PDF cr√©√©: {len(pdf_content):,} bytes ({actual_size_mb:.1f} MB)")
        print(f"üìÑ Nombre de pages: {pages_needed}")
        
        return pdf_content, tiers_test
        
    except ImportError as e:
        print(f"‚ùå Impossible de cr√©er le PDF de test: {e}")
        return None, None

def test_method(method_name, method_func, pdf_content, tiers, timeout_seconds=300):
    """
    Teste une m√©thode d'anonymisation avec surveillance m√©moire et timeout.
    """
    print(f"\nüß™ Test de {method_name}")
    print("=" * 50)
    
    start_time = time.time()
    initial_memory = get_memory_usage()
    max_memory = initial_memory
    
    print(f"üíæ M√©moire initiale: {initial_memory:.1f} MB")
    print(f"‚è±Ô∏è Timeout configur√©: {timeout_seconds}s")
    
    try:
        # D√©marrer un monitoring m√©moire en arri√®re-plan
        start_monitor_time = time.time()
        
        # Ex√©cuter la m√©thode
        result = method_func(pdf_content, tiers)
        
        if isinstance(result, tuple):
            anonymized_pdf, mapping = result
        else:
            anonymized_pdf = result
            mapping = {}
        
        end_time = time.time()
        final_memory = get_memory_usage()
        processing_time = end_time - start_time
        
        # Statistiques
        input_size_mb = len(pdf_content) / 1024 / 1024
        output_size_mb = len(anonymized_pdf) / 1024 / 1024
        memory_increase = final_memory - initial_memory
        
        print(f"‚úÖ {method_name} R√âUSSI!")
        print(f"‚è±Ô∏è Temps de traitement: {processing_time:.2f}s")
        print(f"üìä Taille entr√©e: {input_size_mb:.1f} MB")
        print(f"üìä Taille sortie: {output_size_mb:.1f} MB")
        print(f"üìä Compression: {((input_size_mb - output_size_mb) / input_size_mb * 100):+.1f}%")
        print(f"üíæ M√©moire finale: {final_memory:.1f} MB")
        print(f"üíæ Augmentation m√©moire: {memory_increase:+.1f} MB")
        print(f"üìù Mapping: {len(mapping)} remplacements")
        
        # Test de validation rapide
        if len(anonymized_pdf) > 0:
            print(f"‚úÖ PDF g√©n√©r√© valide ({len(anonymized_pdf):,} bytes)")
        else:
            print(f"‚ùå PDF g√©n√©r√© vide!")
            
        return {
            "success": True,
            "method": method_name,
            "processing_time": processing_time,
            "input_size_mb": input_size_mb,
            "output_size_mb": output_size_mb,
            "memory_increase_mb": memory_increase,
            "mapping_count": len(mapping),
            "result_size": len(anonymized_pdf)
        }
        
    except Exception as e:
        end_time = time.time()
        final_memory = get_memory_usage()
        processing_time = end_time - start_time
        memory_increase = final_memory - initial_memory
        
        print(f"‚ùå {method_name} √âCHEC apr√®s {processing_time:.2f}s")
        print(f"‚ùå Erreur: {str(e)}")
        print(f"üíæ M√©moire √† l'√©chec: {final_memory:.1f} MB")
        print(f"üíæ Augmentation m√©moire: {memory_increase:+.1f} MB")
        
        return {
            "success": False,
            "method": method_name,
            "processing_time": processing_time,
            "error": str(e),
            "memory_increase_mb": memory_increase
        }
    finally:
        # Nettoyage m√©moire
        gc.collect()

def main():
    """
    Test principal des am√©liorations pour gros fichiers.
    """
    print("üöÄ Test des am√©liorations pour GROS FICHIERS PDF")
    print("=" * 60)
    
    # Cr√©er diff√©rentes tailles de test
    test_sizes = [5, 20, 50]  # MB
    
    for target_size in test_sizes:
        print(f"\nüéØ TEST AVEC FICHIER SIMUL√â: {target_size}MB")
        print("=" * 40)
        
        # Cr√©er le PDF de test
        pdf_content, tiers = create_large_test_pdf(target_size)
        
        if pdf_content is None:
            print(f"‚ùå Impossible de cr√©er le PDF de test de {target_size}MB")
            continue
            
        actual_size_mb = len(pdf_content) / 1024 / 1024
        print(f"üìÑ PDF cr√©√©: {actual_size_mb:.1f}MB")
        
        # Tests des diff√©rentes m√©thodes
        results = []
        
        methods_to_test = [
            ("PDF-REDACTOR", anonymize_pdf_with_redactor),
            ("PIPELINE", anonymize_pdf_enhanced_pipeline),
            ("DIRECT", anonymize_pdf_direct)
        ]
        
        for method_name, method_func in methods_to_test:
            result = test_method(method_name, method_func, pdf_content, tiers)
            results.append(result)
            
            # Pause entre les tests
            time.sleep(2)
            gc.collect()
        
        # R√©sum√© des r√©sultats pour cette taille
        print(f"\nüìä R√âSUM√â POUR {actual_size_mb:.1f}MB:")
        print("-" * 30)
        
        successful_methods = [r for r in results if r["success"]]
        failed_methods = [r for r in results if not r["success"]]
        
        if successful_methods:
            print("‚úÖ M√©thodes r√©ussies:")
            for result in successful_methods:
                print(f"  {result['method']}: {result['processing_time']:.1f}s, "
                      f"m√©moire: {result['memory_increase_mb']:+.1f}MB")
                      
        if failed_methods:
            print("‚ùå M√©thodes √©chou√©es:")
            for result in failed_methods:
                print(f"  {result['method']}: {result['error'][:60]}...")
        
        # Recommandation
        if successful_methods:
            fastest = min(successful_methods, key=lambda x: x["processing_time"])
            lowest_memory = min(successful_methods, key=lambda x: x["memory_increase_mb"])
            
            print(f"\nüí° RECOMMANDATIONS pour {actual_size_mb:.1f}MB:")
            print(f"  Plus rapide: {fastest['method']} ({fastest['processing_time']:.1f}s)")
            print(f"  Moins de m√©moire: {lowest_memory['method']} ({lowest_memory['memory_increase_mb']:+.1f}MB)")
            
        print("\n" + "="*60)
    
    print("\nüéâ Tests termin√©s!")
    print("\nüí° CONCLUSIONS G√âN√âRALES:")
    print("üí° - Utilisez pdf-redactor pour fichiers < 500MB")
    print("üí° - Utilisez pipeline pour fichiers 100-500MB") 
    print("üí° - √âvitez direct pour gros fichiers (probl√®mes m√©moire)")
    print("üí° - Segmentez les fichiers > 1GB")

if __name__ == "__main__":
    main() 