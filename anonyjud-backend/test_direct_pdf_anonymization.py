"""
Test de l'anonymisation directe PDF avec PyMuPDF
Teste la pr√©servation parfaite de la mise en page
"""

import os
import sys
import tempfile
import logging

# Configuration du logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Ajouter le r√©pertoire app au chemin Python
sys.path.append(os.path.join(os.path.dirname(__file__), 'app'))

from app.anonymizer import (
    anonymize_pdf_direct, 
    deanonymize_pdf_direct
)
from app.utils import extract_text_from_pdf
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib import colors
from io import BytesIO

def create_complex_test_pdf():
    """Cr√©er un PDF de test avec mise en page complexe similaire au document juridique"""
    buffer = BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4, rightMargin=72, leftMargin=72, topMargin=72, bottomMargin=72)
    
    styles = getSampleStyleSheet()
    title_style = styles['Title']
    heading_style = styles['Heading1']
    normal_style = styles['Normal']
    
    story = []
    
    # Titre principal
    story.append(Paragraph("R√©f√©rences des Parties", title_style))
    story.append(Spacer(1, 12))
    
    # Section Partie Demanderesse
    story.append(Paragraph("Partie Demanderesse", heading_style))
    story.append(Spacer(1, 6))
    
    # Demandeur 1
    story.append(Paragraph("Demandeur 1", styles['Heading2']))
    story.append(Paragraph("Monsieur HUISSOUD Louis", normal_style))
    story.append(Paragraph("244 Mont√©e du Mollard", normal_style))
    story.append(Paragraph("38790 CHARANTONNAY", normal_style))
    story.append(Spacer(1, 12))
    
    # Avocat du demandeur
    story.append(Paragraph("Avocat du demandeur", styles['Heading3']))
    story.append(Paragraph("SCP THOIZET & Associ√©s", normal_style))
    story.append(Paragraph("Me Jacques THOIZET", normal_style))
    story.append(Paragraph("61, Quai Riondet", normal_style))
    story.append(Paragraph("BP 374", normal_style))
    story.append(Paragraph("38205 VIENNE cedex", normal_style))
    story.append(Paragraph("Tel : 04.74.53.70.00", normal_style))
    story.append(Paragraph("Courriel : avocat.thoizet@gmail.com / avocat.thoizet@gmail.com", normal_style))
    story.append(Paragraph("R√©f√©rence du dossier : 22.0003--HUISSOUD/IMBERT--GAUTHIER--MAAF--MATMUT", normal_style))
    story.append(Spacer(1, 12))
    
    # Section Partie D√©fenderesse
    story.append(Paragraph("Partie D√©fenderesse", heading_style))
    story.append(Spacer(1, 6))
    
    # D√©fendeur 01
    story.append(Paragraph("D√©fendeur 01", styles['Heading2']))
    story.append(Paragraph("Monsieur IMBERT Arnaud", normal_style))
    story.append(Paragraph("256 Mont√©e du Mollard", normal_style))
    story.append(Paragraph("38790 CHARANTONNAY", normal_style))
    story.append(Spacer(1, 12))
    
    # D√©fendeur 02
    story.append(Paragraph("D√©fendeur 02", styles['Heading2']))
    story.append(Paragraph("Madame GAUTHIER Guylaine", normal_style))
    story.append(Paragraph("256 Mont√©e du Mollard", normal_style))
    story.append(Paragraph("38790 CHARANTONNAY", normal_style))
    story.append(Spacer(1, 12))
    
    # Avocat des d√©fendeurs
    story.append(Paragraph("Avocat des d√©fendeurs 1 et 2", styles['Heading3']))
    story.append(Paragraph("SCP PYRAMIDE AVOCATS", normal_style))
    story.append(Paragraph("Ma√Ætre ROMULUS Philippe", normal_style))
    story.append(Paragraph("59 Cours Romestang", normal_style))
    story.append(Paragraph("CS 80437", normal_style))
    story.append(Paragraph("38217 VIENNE Cedex", normal_style))
    story.append(Paragraph("Tel : 04.74.85.01.55", normal_style))
    story.append(Paragraph("Courriel : contact@pyramide-avocats.com", normal_style))
    story.append(Paragraph("R√©f√©rence du dossier : 22.00090/PR - IMBERT - GAUTHIER / HUISSOUD", normal_style))
    story.append(Spacer(1, 12))
    
    # Expert technique
    story.append(Paragraph("Expert technique", styles['Heading3']))
    story.append(Paragraph("ELEX-LYON", normal_style))
    story.append(Paragraph("Monsieur RIVOIRE Pierre", normal_style))
    story.append(Paragraph("129 RUE SERVIENT", normal_style))
    story.append(Paragraph("69326 LYON CEDEX 03", normal_style))
    story.append(Paragraph("Courriel : pierre.rivoire@elex.fr", normal_style))
    story.append(Paragraph("R√©f√©rence du dossier : 21ERW8948", normal_style))
    story.append(Spacer(1, 12))
    
    # D√©fendeur 03
    story.append(Paragraph("D√©fendeur 03", styles['Heading2']))
    story.append(Paragraph("Monsieur FOURNIER Thierry, Marc", normal_style))
    story.append(Paragraph("264 mont√©e du Mollard", normal_style))
    story.append(Paragraph("38790 CHARANTONNAY", normal_style))
    
    # Construire le PDF
    doc.build(story)
    
    return buffer.getvalue()

def test_direct_pdf_anonymization():
    """Test de l'anonymisation directe PDF"""
    
    print("üß™ === TEST ANONYMISATION DIRECTE PDF AVEC PYMUPDF ===")
    
    # Cr√©er un PDF de test complexe
    print("\n1. üìÑ Cr√©ation d'un PDF de test avec mise en page complexe...")
    test_pdf = create_complex_test_pdf()
    print(f"‚úÖ PDF de test cr√©√©: {len(test_pdf)} bytes")
    
    # Sauvegarder le PDF original
    with open("test_direct_original.pdf", "wb") as f:
        f.write(test_pdf)
    print("üíæ PDF original sauvegard√©: test_direct_original.pdf")
    
    # D√©finir les tiers pour l'anonymisation
    tiers = [
        {
            "numero": 1,
            "nom": "HUISSOUD",
            "prenom": "Louis",
            "adresse": "244 Mont√©e du Mollard",
            "ville": "CHARANTONNAY",
            "code_postal": "38790"
        },
        {
            "numero": 2,
            "nom": "IMBERT", 
            "prenom": "Arnaud",
            "adresse": "256 Mont√©e du Mollard",
            "ville": "CHARANTONNAY",
            "code_postal": "38790"
        },
        {
            "numero": 3,
            "nom": "GAUTHIER",
            "prenom": "Guylaine",
            "adresse": "256 Mont√©e du Mollard",
            "ville": "CHARANTONNAY",
            "code_postal": "38790"
        },
        {
            "numero": 4,
            "nom": "FOURNIER",
            "prenom": "Thierry",
            "adresse": "264 mont√©e du Mollard",
            "ville": "CHARANTONNAY",
            "code_postal": "38790"
        }
    ]
    
    print(f"\n2. üîí Test d'anonymisation directe avec {len(tiers)} tiers...")
    
    try:
        # Anonymiser avec l'anonymisation directe
        anonymized_pdf, mapping = anonymize_pdf_direct(test_pdf, tiers)
        print(f"‚úÖ Anonymisation directe r√©ussie!")
        print(f"üìä Taille PDF anonymis√©: {len(anonymized_pdf)} bytes")
        print(f"üè∑Ô∏è Mapping g√©n√©r√©: {len(mapping)} balises")
        print(f"üìã Balises cr√©√©es: {list(mapping.keys())}")
        
        # Sauvegarder le PDF anonymis√©
        with open("test_direct_anonymized.pdf", "wb") as f:
            f.write(anonymized_pdf)
        print("üíæ PDF anonymis√© sauvegard√©: test_direct_anonymized.pdf")
        
        # Extraire le texte pour v√©rification
        anonymized_text = extract_text_from_pdf(anonymized_pdf)
        print(f"üìù Texte anonymis√© (premiers 400 chars): {anonymized_text[:400]}...")
        
        # V√©rifier que les balises sont pr√©sentes
        found_tags = [tag for tag in mapping.keys() if tag in anonymized_text]
        print(f"‚úÖ Balises trouv√©es dans le texte: {found_tags}")
        
        # Test de d√©-anonymisation
        print(f"\n3. üîì Test de d√©-anonymisation directe...")
        deanonymized_pdf = deanonymize_pdf_direct(anonymized_pdf, mapping)
        print(f"‚úÖ D√©-anonymisation directe r√©ussie!")
        print(f"üìä Taille PDF d√©-anonymis√©: {len(deanonymized_pdf)} bytes")
        
        # Sauvegarder le PDF d√©-anonymis√©
        with open("test_direct_deanonymized.pdf", "wb") as f:
            f.write(deanonymized_pdf)
        print("üíæ PDF d√©-anonymis√© sauvegard√©: test_direct_deanonymized.pdf")
        
        # Extraire le texte pour v√©rification
        deanonymized_text = extract_text_from_pdf(deanonymized_pdf)
        print(f"üìù Texte d√©-anonymis√© (premiers 400 chars): {deanonymized_text[:400]}...")
        
        # V√©rifier que les valeurs originales sont restaur√©es
        original_values = list(mapping.values())
        restored_values = [val for val in original_values if val in deanonymized_text]
        print(f"‚úÖ Valeurs restaur√©es: {restored_values}")
        
        print("\nüéâ === TESTS TERMIN√âS AVEC SUCC√àS ===")
        print("üìÅ Fichiers g√©n√©r√©s:")
        print("   - test_direct_original.pdf (document original)")
        print("   - test_direct_anonymized.pdf (document anonymis√©)")
        print("   - test_direct_deanonymized.pdf (document d√©-anonymis√©)")
        print("\nüéØ AVANTAGE CLEF: L'anonymisation directe pr√©serve PARFAITEMENT la mise en page!")
        print("üí° Comparez visuellement les fichiers pour v√©rifier la pr√©servation de la mise en page!")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors des tests: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_direct_pdf_anonymization()
    sys.exit(0 if success else 1) 