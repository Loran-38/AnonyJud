"""
Test du pipeline PDF enhanced : PDF ‚Üí Word ‚Üí Anonymisation ‚Üí PDF
Teste la pr√©servation de mise en page et l'anonymisation correcte.
"""

import os
import sys
import tempfile

# Ajouter le r√©pertoire app au chemin Python
sys.path.append(os.path.join(os.path.dirname(__file__), 'app'))

from app.anonymizer import (
    anonymize_pdf_enhanced_pipeline, 
    deanonymize_pdf_enhanced_pipeline,
    convert_pdf_to_word_enhanced,
    convert_word_to_pdf_enhanced,
    PDF_ENHANCED_PIPELINE
)
from app.utils import extract_text_from_pdf
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table
from reportlab.lib.styles import getSampleStyleSheet
from io import BytesIO

def create_test_pdf_complex():
    """Cr√©e un PDF de test avec une mise en page complexe"""
    buffer = BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4)
    styles = getSampleStyleSheet()
    
    story = []
    
    # Titre
    story.append(Paragraph("JUGEMENT TRIBUNAL DE GRANDE INSTANCE", styles['Title']))
    story.append(Spacer(1, 20))
    
    # Informations du dossier avec mise en forme
    story.append(Paragraph("<b>Affaire:</b> Dupont c/ Martin", styles['Normal']))
    story.append(Paragraph("<b>Date:</b> 15 janvier 2024", styles['Normal']))
    story.append(Spacer(1, 15))
    
    # Parties avec formatage
    story.append(Paragraph("<b>DEMANDEUR:</b>", styles['Heading2']))
    story.append(Paragraph("Monsieur Jean DUPONT", styles['Normal']))
    story.append(Paragraph("N√© le 12 mars 1975", styles['Normal']))
    story.append(Paragraph("Demeurant 15 rue de la Paix, 75001 Paris", styles['Normal']))
    story.append(Spacer(1, 10))
    
    story.append(Paragraph("<b>D√âFENDEUR:</b>", styles['Heading2']))
    story.append(Paragraph("Madame Marie MARTIN", styles['Normal']))
    story.append(Paragraph("N√©e le 8 juin 1980", styles['Normal']))
    story.append(Paragraph("Demeurant 42 avenue des Champs, 69001 Lyon", styles['Normal']))
    story.append(Spacer(1, 15))
    
    # Tableau avec formatage
    data = [
        ['Type', 'Montant', 'B√©n√©ficiaire'],
        ['Dommages-int√©r√™ts', '5 000 ‚Ç¨', 'Jean DUPONT'],
        ['Frais de proc√©dure', '1 500 ‚Ç¨', 'Jean DUPONT'],
        ['Total', '6 500 ‚Ç¨', '']
    ]
    table = Table(data)
    story.append(table)
    story.append(Spacer(1, 15))
    
    # Paragraphe de conclusion
    story.append(Paragraph(
        "PAR CES MOTIFS, le Tribunal condamne Marie MARTIN √† verser √† Jean DUPONT "
        "la somme de six mille cinq cents euros (6 500 ‚Ç¨) au titre des dommages-int√©r√™ts "
        "et frais de proc√©dure.",
        styles['Normal']
    ))
    
    doc.build(story)
    return buffer.getvalue()

def test_pipeline_enhanced():
    """Test complet du pipeline enhanced"""
    print("=" * 60)
    print("üß™ TEST PIPELINE PDF ENHANCED")
    print("=" * 60)
    
    # V√©rifier que le pipeline enhanced est disponible
    if not PDF_ENHANCED_PIPELINE:
        print("‚ùå ERREUR: Pipeline PDF enhanced non disponible")
        print("Installez pdf2docx: pip install pdf2docx")
        return False
    
    print("‚úÖ Pipeline PDF enhanced disponible")
    
    # D√©finir les tiers de test
    tiers = [
        {
            "numero": 1,
            "nom": "DUPONT",
            "prenom": "Jean",
            "adresse": "15 rue de la Paix, 75001 Paris",
            "customFields": []
        },
        {
            "numero": 2,
            "nom": "MARTIN", 
            "prenom": "Marie",
            "adresse": "42 avenue des Champs, 69001 Lyon",
            "customFields": []
        }
    ]
    
    try:
        # √âtape 1: Cr√©er un PDF de test complexe
        print("\nüìÑ √âtape 1: Cr√©ation du PDF de test...")
        pdf_content = create_test_pdf_complex()
        print(f"‚úÖ PDF cr√©√©: {len(pdf_content)} bytes")
        
        # Extraire le texte original pour comparaison
        original_text = extract_text_from_pdf(pdf_content)
        print(f"üìù Texte original (premiers 200 chars): {original_text[:200]}...")
        
        # √âtape 2: Test de conversion PDF ‚Üí Word
        print("\nüîÑ √âtape 2: Test conversion PDF ‚Üí Word...")
        word_content = convert_pdf_to_word_enhanced(pdf_content)
        print(f"‚úÖ Conversion PDF ‚Üí Word r√©ussie: {len(word_content)} bytes")
        
        # √âtape 3: Test de conversion Word ‚Üí PDF
        print("\nüîÑ √âtape 3: Test conversion Word ‚Üí PDF...")
        pdf_reconverted = convert_word_to_pdf_enhanced(word_content)
        print(f"‚úÖ Conversion Word ‚Üí PDF r√©ussie: {len(pdf_reconverted)} bytes")
        
        # √âtape 4: Test du pipeline complet d'anonymisation
        print("\nüîí √âtape 4: Test pipeline complet d'anonymisation...")
        anonymized_pdf, mapping = anonymize_pdf_enhanced_pipeline(pdf_content, tiers)
        print(f"‚úÖ Anonymisation r√©ussie: {len(anonymized_pdf)} bytes")
        print(f"üìä Mapping g√©n√©r√©: {mapping}")
        
        # V√©rifier le mapping
        expected_tags = ["NOM1", "PRENOM1", "NOM2", "PRENOM2"]
        for tag in expected_tags:
            if tag in mapping:
                print(f"‚úÖ Tag {tag} trouv√©: {mapping[tag]}")
            else:
                print(f"‚ùå Tag {tag} manquant dans le mapping")
        
        # Extraire le texte anonymis√© pour v√©rification
        anonymized_text = extract_text_from_pdf(anonymized_pdf)
        print(f"üìù Texte anonymis√© (premiers 200 chars): {anonymized_text[:200]}...")
        
        # V√©rifier que les noms ont √©t√© anonymis√©s
        if "DUPONT" not in anonymized_text and "NOM1" in anonymized_text:
            print("‚úÖ Anonymisation des noms r√©ussie")
        else:
            print("‚ùå Probl√®me d'anonymisation des noms")
            
        if "Jean" not in anonymized_text and "PRENOM1" in anonymized_text:
            print("‚úÖ Anonymisation des pr√©noms r√©ussie")
        else:
            print("‚ùå Probl√®me d'anonymisation des pr√©noms")
        
        # √âtape 5: Test du pipeline de d√©-anonymisation
        print("\nüîì √âtape 5: Test pipeline de d√©-anonymisation...")
        deanonymized_pdf = deanonymize_pdf_enhanced_pipeline(anonymized_pdf, mapping)
        print(f"‚úÖ D√©-anonymisation r√©ussie: {len(deanonymized_pdf)} bytes")
        
        # Extraire le texte d√©-anonymis√© pour v√©rification
        deanonymized_text = extract_text_from_pdf(deanonymized_pdf)
        print(f"üìù Texte d√©-anonymis√© (premiers 200 chars): {deanonymized_text[:200]}...")
        
        # V√©rifier que les noms ont √©t√© restaur√©s
        if "DUPONT" in deanonymized_text and "NOM1" not in deanonymized_text:
            print("‚úÖ D√©-anonymisation des noms r√©ussie")
        else:
            print("‚ùå Probl√®me de d√©-anonymisation des noms")
            
        if "Jean" in deanonymized_text and "PRENOM1" not in deanonymized_text:
            print("‚úÖ D√©-anonymisation des pr√©noms r√©ussie")
        else:
            print("‚ùå Probl√®me de d√©-anonymisation des pr√©noms")
        
        # Sauvegarder les fichiers de test pour inspection
        print("\nüíæ Sauvegarde des fichiers de test...")
        
        with open("test_original.pdf", "wb") as f:
            f.write(pdf_content)
        print("‚úÖ test_original.pdf sauvegard√©")
        
        with open("test_anonymized.pdf", "wb") as f:
            f.write(anonymized_pdf)
        print("‚úÖ test_anonymized.pdf sauvegard√©")
        
        with open("test_deanonymized.pdf", "wb") as f:
            f.write(deanonymized_pdf)
        print("‚úÖ test_deanonymized.pdf sauvegard√©")
        
        print("\n" + "=" * 60)
        print("üéâ TOUS LES TESTS ONT R√âUSSI!")
        print("üîç V√©rifiez les fichiers PDF g√©n√©r√©s pour valider la mise en page")
        print("=" * 60)
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERREUR DANS LE TEST: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

def test_fallback_libreoffice():
    """Test si LibreOffice est disponible"""
    print("\nüîß Test de disponibilit√© LibreOffice...")
    
    try:
        import subprocess
        import sys
        
        # Commandes √† tester selon l'OS
        if sys.platform == "win32":
            commands = ["soffice", "libreoffice"]
        elif sys.platform == "darwin":
            commands = ["/Applications/LibreOffice.app/Contents/MacOS/soffice", "soffice"]
        else:
            commands = ["soffice", "libreoffice"]
        
        for cmd in commands:
            try:
                result = subprocess.run([cmd, "--version"], 
                                      capture_output=True, text=True, timeout=5)
                if result.returncode == 0:
                    print(f"‚úÖ LibreOffice trouv√©: {cmd}")
                    print(f"   Version: {result.stdout.strip()}")
                    return True
            except:
                continue
        
        print("‚ùå LibreOffice non trouv√© - le pipeline utilisera reportlab en fallback")
        return False
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test LibreOffice: {str(e)}")
        return False

if __name__ == "__main__":
    print("üöÄ D√©marrage des tests du pipeline PDF enhanced")
    
    # Test de LibreOffice
    test_fallback_libreoffice()
    
    # Test principal
    success = test_pipeline_enhanced()
    
    if success:
        print("\nüéâ Tous les tests sont pass√©s avec succ√®s!")
        sys.exit(0)
    else:
        print("\n‚ùå Certains tests ont √©chou√©")
        sys.exit(1) 