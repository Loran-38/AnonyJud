#!/usr/bin/env python3
"""
Test complet de la correction du bug de scission du pr√©nom
"""

import os
import sys
import logging
from pathlib import Path

# Ajouter le r√©pertoire parent au path pour importer les modules
sys.path.append(str(Path(__file__).parent))

from app.anonymizer import anonymize_text, anonymize_pdf_direct, deanonymize_pdf_direct

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

def test_prenom_fix_complete():
    """Test complet de la correction du bug de scission du pr√©nom"""
    print("üß™ Test complet de la correction du bug de scission du pr√©nom")
    print("=" * 70)
    
    # Cas de test multiples pour v√©rifier la robustesse
    test_cases = [
        {
            "name": "Cas simple: HUISSOUD Louis",
            "tiers": [
                {
                    "numero": 1,
                    "nom": "HUISSOUD",
                    "prenom": "Louis",
                    "adresse": "244 Mont√©e du Mollard"
                }
            ],
            "text": "Monsieur HUISSOUD Louis habite au 244 Mont√©e du Mollard"
        },
        {
            "name": "Cas multiple: Plusieurs tiers",
            "tiers": [
                {
                    "numero": 1,
                    "nom": "HUISSOUD",
                    "prenom": "Louis",
                    "adresse": "244 Mont√©e du Mollard"
                },
                {
                    "numero": 2,
                    "nom": "IMBERT", 
                    "prenom": "Arnaud",
                    "adresse": "256 Mont√©e du Mollard"
                },
                {
                    "numero": 3,
                    "nom": "GAUTHIER",
                    "prenom": "Guylaine",
                    "adresse": "256 Mont√©e du Mollard"
                }
            ],
            "text": """
            Demandeur: HUISSOUD Louis
            D√©fendeur 1: IMBERT Arnaud  
            D√©fendeur 2: GAUTHIER Guylaine
            """
        },
        {
            "name": "Cas pi√®ge: Mots contenant les balises",
            "tiers": [
                {
                    "numero": 1,
                    "nom": "NOM",
                    "prenom": "PRENOM",
                    "adresse": "123 Rue Test"
                }
            ],
            "text": "Monsieur NOM PRENOM habite PRENOMINAL street avec NOMINAL address"
        }
    ]
    
    all_tests_passed = True
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\nüîç Test {i}: {test_case['name']}")
        print("-" * 50)
        
        # Test d'anonymisation
        print("üìù Texte original:")
        print(test_case['text'])
        
        anonymized_text, mapping = anonymize_text(test_case['text'], test_case['tiers'])
        
        print(f"üìã Mapping: {mapping}")
        print("üìù Texte anonymis√©:")
        print(anonymized_text)
        
        # Test de d√©-anonymisation
        from app.deanonymizer import deanonymize_text
        deanonymized_text = deanonymize_text(anonymized_text, mapping)
        
        print("üìù Texte d√©-anonymis√©:")
        print(deanonymized_text)
        
        # V√©rifications
        test_passed = True
        
        # V√©rifier que tous les pr√©noms sont correctement restaur√©s
        for tiers in test_case['tiers']:
            prenom = tiers.get('prenom', '')
            nom = tiers.get('nom', '')
            
            if prenom and prenom not in deanonymized_text:
                print(f"‚ùå Pr√©nom '{prenom}' NON restaur√©")
                test_passed = False
            elif prenom:
                print(f"‚úÖ Pr√©nom '{prenom}' correctement restaur√©")
            
            if nom and nom not in deanonymized_text:
                print(f"‚ùå Nom '{nom}' NON restaur√©")
                test_passed = False
            elif nom:
                print(f"‚úÖ Nom '{nom}' correctement restaur√©")
        
        # V√©rifier qu'il n'y a pas de concatenation incorrecte
        problematic_patterns = [
            "PREHUISSOUD", "PRENOMHUI", "LOUISHUI", "PREARNAUD", "PREGUYLAINE"
        ]
        
        for pattern in problematic_patterns:
            if pattern in deanonymized_text:
                print(f"‚ùå Concatenation incorrecte d√©tect√©e: {pattern}")
                test_passed = False
        
        if test_passed:
            print(f"‚úÖ Test {i} R√âUSSI")
        else:
            print(f"‚ùå Test {i} √âCHOU√â")
            all_tests_passed = False
    
    # Test PDF complet
    print(f"\nüîç Test PDF complet")
    print("-" * 50)
    
    pdf_test_passed = test_pdf_complete()
    
    # R√©sum√© final
    print(f"\nüìä R√âSUM√â FINAL")
    print("=" * 70)
    
    if all_tests_passed and pdf_test_passed:
        print("üéâ TOUS LES TESTS R√âUSSIS!")
        print("‚úÖ Le bug de scission du pr√©nom est compl√®tement corrig√©")
        print("‚úÖ Les expressions r√©guli√®res avec limites de mots fonctionnent parfaitement")
        print("‚úÖ Aucune concatenation incorrecte d√©tect√©e")
        return True
    else:
        print("‚ùå CERTAINS TESTS ONT √âCHOU√â")
        if not all_tests_passed:
            print("‚ùå Probl√®mes dans les tests texte")
        if not pdf_test_passed:
            print("‚ùå Probl√®mes dans le test PDF")
        return False


def test_pdf_complete():
    """Test complet sur PDF"""
    
    # Donn√©es de test avec plusieurs tiers
    tiers_test = [
        {
            "numero": 1,
            "nom": "HUISSOUD",
            "prenom": "Louis",
            "adresse": "244 Mont√©e du Mollard"
        },
        {
            "numero": 2,
            "nom": "IMBERT",
            "prenom": "Arnaud", 
            "adresse": "256 Mont√©e du Mollard"
        },
        {
            "numero": 3,
            "nom": "GAUTHIER",
            "prenom": "Guylaine",
            "adresse": "256 Mont√©e du Mollard"
        }
    ]
    
    # Cr√©er un fichier PDF de test si n√©cessaire
    pdf_file = "test_data.pdf"
    if not os.path.exists(pdf_file):
        print("üìÑ Cr√©ation d'un fichier PDF de test...")
        from create_test_pdf import create_test_pdf
        create_test_pdf()
    
    try:
        # Lire le fichier PDF
        with open(pdf_file, 'rb') as f:
            pdf_content = f.read()
        
        # Anonymisation PDF
        anonymized_content, mapping = anonymize_pdf_direct(pdf_content, tiers_test)
        
        # D√©-anonymisation PDF
        deanonymized_content = deanonymize_pdf_direct(anonymized_content, mapping)
        
        # Extraire le texte pour v√©rification
        import fitz
        
        doc_deanonymized = fitz.open(stream=deanonymized_content, filetype="pdf")
        text_deanonymized = ""
        for page in doc_deanonymized:
            text_deanonymized += page.get_text()
        doc_deanonymized.close()
        
        # V√©rifications
        test_passed = True
        
        # V√©rifier que tous les pr√©noms sont pr√©sents
        prenoms_attendus = ["Louis", "Arnaud", "Guylaine"]
        for prenom in prenoms_attendus:
            if prenom in text_deanonymized:
                print(f"‚úÖ Pr√©nom '{prenom}' correctement restaur√© dans le PDF")
            else:
                print(f"‚ùå Pr√©nom '{prenom}' NON restaur√© dans le PDF")
                test_passed = False
        
        # V√©rifier que tous les noms sont pr√©sents
        noms_attendus = ["HUISSOUD", "IMBERT", "GAUTHIER"]
        for nom in noms_attendus:
            if nom in text_deanonymized:
                print(f"‚úÖ Nom '{nom}' correctement restaur√© dans le PDF")
            else:
                print(f"‚ùå Nom '{nom}' NON restaur√© dans le PDF")
                test_passed = False
        
        # V√©rifier l'absence de concatenations incorrectes
        problematic_patterns = [
            "PREHUISSOUD", "PREIMBERT", "PREGAUTHIER",
            "PRENOMHUI", "PRENOMIMB", "PRENOMGAU",
            "LOUISHUISSOUD", "ARNAUDIMBERT", "GUYLAINEGAUTHIER"
        ]
        
        for pattern in problematic_patterns:
            if pattern in text_deanonymized:
                print(f"‚ùå Concatenation incorrecte d√©tect√©e dans le PDF: {pattern}")
                test_passed = False
        
        if test_passed:
            print("‚úÖ Test PDF complet R√âUSSI")
        
        # Sauvegarder pour inspection
        with open("test_fix_complete_anonymized.pdf", 'wb') as f:
            f.write(anonymized_content)
        
        with open("test_fix_complete_deanonymized.pdf", 'wb') as f:
            f.write(deanonymized_content)
        
        print("üíæ Fichiers sauvegard√©s:")
        print("  - test_fix_complete_anonymized.pdf")
        print("  - test_fix_complete_deanonymized.pdf")
        
        return test_passed
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test PDF: {str(e)}")
        return False


if __name__ == "__main__":
    success = test_prenom_fix_complete()
    sys.exit(0 if success else 1) 