#!/usr/bin/env python3
"""
Script de test pour v√©rifier les outils de conversion Word ‚Üí PDF
Teste LibreOffice et unoconv sur Railway
"""

import subprocess
import sys
import logging
import tempfile
import os
from docx import Document
from docx.shared import Inches

# Configuration des logs
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def create_test_docx():
    """Cr√©e un document Word de test"""
    try:
        doc = Document()
        doc.add_heading('Test de Conversion', 0)
        doc.add_paragraph('Ceci est un test de conversion Word ‚Üí PDF.')
        doc.add_paragraph('Ce document contient :')
        
        # Ajouter une liste
        p = doc.add_paragraph()
        p.add_run('‚Ä¢ ').bold = True
        p.add_run('Du texte en gras')
        p = doc.add_paragraph()
        p.add_run('‚Ä¢ ').bold = True
        p.add_run('Du texte en italique').italic = True
        p = doc.add_paragraph()
        p.add_run('‚Ä¢ ').bold = True
        p.add_run('Des polices diff√©rentes')
        
        doc.add_heading('Tableau de test', level=1)
        table = doc.add_table(rows=2, cols=2)
        table.style = 'Table Grid'
        
        cells = table.rows[0].cells
        cells[0].text = 'Colonne 1'
        cells[1].text = 'Colonne 2'
        
        cells = table.rows[1].cells
        cells[0].text = 'Donn√©es 1'
        cells[1].text = 'Donn√©es 2'
        
        # Sauvegarder temporairement
        with tempfile.NamedTemporaryFile(delete=False, suffix=".docx") as temp_file:
            doc.save(temp_file.name)
            logger.info(f"‚úÖ Document Word de test cr√©√©: {temp_file.name}")
            return temp_file.name
            
    except Exception as e:
        logger.error(f"‚ùå Erreur cr√©ation document test: {str(e)}")
        return None

def test_libreoffice():
    """Test de LibreOffice"""
    logger.info("üîÑ Test de LibreOffice...")
    
    # Cr√©er un document de test
    test_docx = create_test_docx()
    if not test_docx:
        return False
    
    try:
        # Commandes LibreOffice √† tester
        libreoffice_commands = [
            "soffice",
            "libreoffice",
            "/usr/bin/soffice",
            "/usr/bin/libreoffice"
        ]
        
        # Variables d'environnement
        env = os.environ.copy()
        env.update({
            'HOME': '/tmp',
            'XDG_CONFIG_HOME': '/tmp/.config',
            'XDG_DATA_HOME': '/tmp/.local/share',
            'XDG_CACHE_HOME': '/tmp/.cache'
        })
        
        for cmd in libreoffice_commands:
            try:
                logger.info(f"üìÑ Test LibreOffice avec: {cmd}")
                
                output_dir = os.path.dirname(test_docx)
                
                result = subprocess.run([
                    cmd,
                    "--headless",
                    "--invisible", 
                    "--nodefault",
                    "--nolockcheck",
                    "--nologo",
                    "--norestore",
                    "--convert-to", "pdf",
                    "--outdir", output_dir,
                    test_docx
                ], capture_output=True, text=True, timeout=60, env=env)
                
                if result.returncode == 0:
                    expected_pdf = test_docx.replace('.docx', '.pdf')
                    if os.path.exists(expected_pdf):
                        file_size = os.path.getsize(expected_pdf)
                        logger.info(f"‚úÖ LibreOffice r√©ussi avec {cmd}")
                        logger.info(f"üìÑ PDF g√©n√©r√©: {expected_pdf} ({file_size} bytes)")
                        
                        # Nettoyer
                        os.unlink(expected_pdf)
                        return True
                    else:
                        logger.warning(f"‚ö†Ô∏è PDF non g√©n√©r√©: {expected_pdf}")
                else:
                    logger.debug(f"‚ùå √âchec {cmd}: {result.stderr}")
                    
            except Exception as e:
                logger.debug(f"‚ùå Erreur {cmd}: {str(e)}")
                continue
        
        logger.error("‚ùå Aucune commande LibreOffice n'a fonctionn√©")
        return False
        
    finally:
        if os.path.exists(test_docx):
            os.unlink(test_docx)

def test_unoconv():
    """Test de unoconv"""
    logger.info("üîÑ Test de unoconv...")
    
    # Cr√©er un document de test
    test_docx = create_test_docx()
    if not test_docx:
        return False
    
    try:
        # Commandes unoconv √† tester
        unoconv_commands = [
            "unoconv",
            "/usr/bin/unoconv"
        ]
        
        for cmd in unoconv_commands:
            try:
                logger.info(f"üìÑ Test unoconv avec: {cmd}")
                
                output_dir = os.path.dirname(test_docx)
                output_file = os.path.join(output_dir, "test_unoconv.pdf")
                
                result = subprocess.run([
                    cmd,
                    "-f", "pdf",
                    "-o", output_file,
                    test_docx
                ], capture_output=True, text=True, timeout=60)
                
                if result.returncode == 0:
                    if os.path.exists(output_file):
                        file_size = os.path.getsize(output_file)
                        logger.info(f"‚úÖ unoconv r√©ussi avec {cmd}")
                        logger.info(f"üìÑ PDF g√©n√©r√©: {output_file} ({file_size} bytes)")
                        
                        # Nettoyer
                        os.unlink(output_file)
                        return True
                    else:
                        logger.warning(f"‚ö†Ô∏è PDF non g√©n√©r√©: {output_file}")
                else:
                    logger.debug(f"‚ùå √âchec {cmd}: {result.stderr}")
                    
            except Exception as e:
                logger.debug(f"‚ùå Erreur {cmd}: {str(e)}")
                continue
        
        logger.error("‚ùå Aucune commande unoconv n'a fonctionn√©")
        return False
        
    finally:
        if os.path.exists(test_docx):
            os.unlink(test_docx)

def test_system_info():
    """Affiche les informations syst√®me"""
    logger.info("üîç Informations syst√®me:")
    
    # Version Python
    logger.info(f"üêç Python: {sys.version}")
    
    # Syst√®me d'exploitation
    try:
        with open('/etc/os-release') as f:
            os_info = f.read()
            logger.info(f"üñ•Ô∏è OS: {os_info.split('PRETTY_NAME=')[1].split('\"')[1]}")
    except:
        logger.info(f"üñ•Ô∏è OS: {sys.platform}")
    
    # V√©rifier les commandes disponibles
    commands_to_check = [
        "soffice", "libreoffice", "unoconv", 
        "/usr/bin/soffice", "/usr/bin/libreoffice", "/usr/bin/unoconv"
    ]
    
    logger.info("üìã Commandes disponibles:")
    for cmd in commands_to_check:
        try:
            result = subprocess.run([cmd, "--version"], 
                                  capture_output=True, text=True, timeout=5)
            if result.returncode == 0:
                version = result.stdout.strip().split('\n')[0]
                logger.info(f"   ‚úÖ {cmd}: {version}")
            else:
                logger.info(f"   ‚ùå {cmd}: non fonctionnel")
        except:
            logger.info(f"   ‚ùå {cmd}: non trouv√©")

def main():
    """Fonction principale"""
    logger.info("üöÄ D√©but des tests de conversion Word ‚Üí PDF")
    
    # Informations syst√®me
    test_system_info()
    
    # Test LibreOffice
    libreoffice_ok = test_libreoffice()
    
    # Test unoconv
    unoconv_ok = test_unoconv()
    
    # R√©sum√©
    logger.info("üìä R√©sum√© des tests:")
    logger.info(f"   - LibreOffice: {'‚úÖ' if libreoffice_ok else '‚ùå'}")
    logger.info(f"   - unoconv: {'‚úÖ' if unoconv_ok else '‚ùå'}")
    
    if libreoffice_ok or unoconv_ok:
        logger.info("üéâ Au moins un outil de conversion fonctionne!")
        return True
    else:
        logger.error("‚ùå Aucun outil de conversion ne fonctionne")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 