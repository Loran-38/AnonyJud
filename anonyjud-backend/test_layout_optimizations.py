#!/usr/bin/env python3
"""
Test des optimisations de mise en page pour le pipeline PDF ‚Üí Word ‚Üí PDF
V√©rifie que les am√©liorations de conservation de mise en page fonctionnent correctement.
"""

import sys
import os
import logging
import tempfile
from pathlib import Path

# Ajouter le r√©pertoire parent au path pour importer les modules
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.layout_optimizer import LayoutOptimizer, LayoutMetrics
from app.anonymizer import convert_pdf_to_word_enhanced, convert_word_to_pdf_enhanced

# Configuration des logs
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def create_test_pdf():
    """Cr√©e un PDF de test avec une mise en page complexe"""
    try:
        from reportlab.pdfgen import canvas
        from reportlab.lib.pagesizes import A4
        from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
        from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
        from reportlab.lib.enums import TA_JUSTIFY, TA_LEFT, TA_CENTER, TA_RIGHT
        from reportlab.lib import colors
        from reportlab.lib.units import inch
        from io import BytesIO
        
        # Cr√©er un buffer pour le PDF
        buffer = BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=A4, 
                              rightMargin=72, leftMargin=72,
                              topMargin=72, bottomMargin=72)
        
        # Styles
        styles = getSampleStyleSheet()
        
        # Style titre
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Heading1'],
            fontSize=18,
            spaceAfter=12,
            alignment=TA_CENTER,
            fontName='Helvetica-Bold'
        )
        
        # Style sous-titre
        subtitle_style = ParagraphStyle(
            'CustomSubtitle',
            parent=styles['Heading2'],
            fontSize=14,
            spaceAfter=8,
            alignment=TA_LEFT,
            fontName='Helvetica-Bold'
        )
        
        # Style normal avec diff√©rentes polices
        normal_style = ParagraphStyle(
            'CustomNormal',
            parent=styles['Normal'],
            fontSize=11,
            leading=14,
            alignment=TA_JUSTIFY,
            fontName='Times-Roman'
        )
        
        # Style pour les adresses
        address_style = ParagraphStyle(
            'CustomAddress',
            parent=styles['Normal'],
            fontSize=10,
            leading=12,
            alignment=TA_LEFT,
            fontName='Courier'
        )
        
        story = []
        
        # Titre principal
        story.append(Paragraph("CONTRAT DE TRAVAIL", title_style))
        story.append(Spacer(1, 20))
        
        # Informations des parties
        story.append(Paragraph("ENTRE LES SOUSSIGN√âS :", subtitle_style))
        story.append(Spacer(1, 10))
        
        # Employeur
        story.append(Paragraph("L'employeur :", subtitle_style))
        story.append(Paragraph("SARL TECHNOLOGIES AVANC√âES<br/>"
                             "123 Avenue de l'Innovation<br/>"
                             "75001 Paris<br/>"
                             "T√©l√©phone : 01 23 45 67 89<br/>"
                             "Email : contact@tech-avancees.fr", address_style))
        story.append(Spacer(1, 15))
        
        # Employ√©
        story.append(Paragraph("L'employ√© :", subtitle_style))
        story.append(Paragraph("Jean-Pierre MARTIN<br/>"
                             "N√© le 15 mars 1985 √† Lyon<br/>"
                             "Demeurant au 456 Rue de la Paix<br/>"
                             "69002 Lyon<br/>"
                             "Num√©ro de s√©curit√© sociale : 1 85 03 15 123 456 78<br/>"
                             "T√©l√©phone : 06 12 34 56 78<br/>"
                             "Email : jean-pierre.martin@email.com", address_style))
        story.append(Spacer(1, 20))
        
        # Tableau des conditions
        story.append(Paragraph("CONDITIONS D'EMPLOI :", subtitle_style))
        story.append(Spacer(1, 10))
        
        table_data = [
            ['√âl√©ment', 'D√©tail'],
            ['Poste', 'D√©veloppeur Full-Stack'],
            ['Date de d√©but', '1er septembre 2024'],
            ['Lieu de travail', 'Paris (75)'],
            ['Salaire brut mensuel', '4 500 ‚Ç¨'],
            ['Horaires', '35h/semaine'],
            ['Cong√©s pay√©s', '25 jours/an']
        ]
        
        table = Table(table_data)
        table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('FONTNAME', (0, 1), (-1, -1), 'Times-Roman'),
            ('FONTSIZE', (0, 1), (-1, -1), 10)
        ]))
        story.append(table)
        story.append(Spacer(1, 20))
        
        # Clause de confidentialit√©
        story.append(Paragraph("CLAUSE DE CONFIDENTIALIT√â :", subtitle_style))
        story.append(Paragraph("L'employ√© s'engage √† respecter la confidentialit√© des informations "
                             "auxquelles il aura acc√®s dans le cadre de ses fonctions. "
                             "Cette obligation de confidentialit√© s'applique pendant la dur√©e "
                             "du contrat et apr√®s sa cessation.", normal_style))
        story.append(Spacer(1, 15))
        
        # Signature
        story.append(Paragraph("Fait √† Paris, le 15 ao√ªt 2024", normal_style))
        story.append(Spacer(1, 30))
        
        # Espaces pour signatures
        signature_table = Table([
            ['Signature employeur', 'Signature employ√©'],
            ['', ''],
            ['', '']
        ])
        signature_table.setStyle(TableStyle([
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('LINEBELOW', (0, 1), (-1, 1), 1, colors.black),
            ('LINEBELOW', (0, 2), (-1, 2), 1, colors.black)
        ]))
        story.append(signature_table)
        
        # Construire le PDF
        doc.build(story)
        
        # R√©cup√©rer le contenu
        pdf_content = buffer.getvalue()
        buffer.close()
        
        logger.info(f"‚úÖ PDF de test cr√©√© avec succ√®s. Taille: {len(pdf_content)} bytes")
        return pdf_content
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la cr√©ation du PDF de test: {str(e)}")
        raise

def test_layout_optimizations():
    """Test complet des optimisations de mise en page"""
    logger.info("üöÄ D√©but des tests d'optimisation de mise en page")
    
    try:
        # Cr√©er un PDF de test
        logger.info("üìÑ Cr√©ation du PDF de test...")
        test_pdf_content = create_test_pdf()
        
        # Cr√©er l'optimiseur
        optimizer = LayoutOptimizer()
        
        # Test 1: Optimisation PDF ‚Üí Word
        logger.info("üîÑ Test 1: Optimisation PDF ‚Üí Word")
        try:
            optimized_docx = optimizer.optimize_pdf_to_word_conversion(test_pdf_content)
            logger.info(f"‚úÖ Test 1 r√©ussi. Taille DOCX optimis√©: {len(optimized_docx)} bytes")
        except Exception as e:
            logger.error(f"‚ùå Test 1 √©chou√©: {str(e)}")
            return False
        
        # Test 2: Optimisation Word ‚Üí PDF
        logger.info("üîÑ Test 2: Optimisation Word ‚Üí PDF")
        try:
            optimized_pdf = optimizer.optimize_word_to_pdf_conversion(optimized_docx)
            logger.info(f"‚úÖ Test 2 r√©ussi. Taille PDF optimis√©: {len(optimized_pdf)} bytes")
        except Exception as e:
            logger.error(f"‚ùå Test 2 √©chou√©: {str(e)}")
            return False
        
        # Test 3: Comparaison des mises en page
        logger.info("üîÑ Test 3: Comparaison des mises en page")
        try:
            comparison = optimizer.compare_layouts(test_pdf_content, optimized_pdf)
            
            if "differences" in comparison:
                diff = comparison["differences"]
                preservation_score = diff.get("preservation_score", 0)
                
                logger.info(f"üìä R√©sultats de la comparaison:")
                logger.info(f"   - Score de pr√©servation: {preservation_score:.2f}%")
                logger.info(f"   - Diff√©rence pages: {diff.get('page_count_diff', 0)}")
                logger.info(f"   - Diff√©rence blocs texte: {diff.get('text_blocks_diff', 0)}")
                logger.info(f"   - Diff√©rence taille police: {diff.get('font_size_diff', 0):.2f}")
                
                # V√©rifier que le score de pr√©servation est acceptable (> 70%)
                if preservation_score >= 70:
                    logger.info(f"‚úÖ Test 3 r√©ussi. Score de pr√©servation excellent: {preservation_score:.2f}%")
                else:
                    logger.warning(f"‚ö†Ô∏è Test 3: Score de pr√©servation faible: {preservation_score:.2f}%")
                    
            else:
                logger.error(f"‚ùå Test 3 √©chou√©: Impossible de comparer les mises en page")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Test 3 √©chou√©: {str(e)}")
            return False
        
        # Test 4: Test des fonctions int√©gr√©es
        logger.info("üîÑ Test 4: Test des fonctions int√©gr√©es")
        try:
            # Test convert_pdf_to_word_enhanced
            docx_content = convert_pdf_to_word_enhanced(test_pdf_content)
            logger.info(f"‚úÖ convert_pdf_to_word_enhanced r√©ussi. Taille: {len(docx_content)} bytes")
            
            # Test convert_word_to_pdf_enhanced
            pdf_content = convert_word_to_pdf_enhanced(docx_content)
            logger.info(f"‚úÖ convert_word_to_pdf_enhanced r√©ussi. Taille: {len(pdf_content)} bytes")
            
        except Exception as e:
            logger.error(f"‚ùå Test 4 √©chou√©: {str(e)}")
            return False
        
        logger.info("üéâ Tous les tests d'optimisation de mise en page ont r√©ussi!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur g√©n√©rale lors des tests: {str(e)}")
        return False

def test_specific_optimizations():
    """Test des optimisations sp√©cifiques"""
    logger.info("üîÑ Test des optimisations sp√©cifiques")
    
    try:
        # Cr√©er un PDF de test
        test_pdf_content = create_test_pdf()
        optimizer = LayoutOptimizer()
        
        # Test du pr√©-traitement PDF
        logger.info("üìÑ Test du pr√©-traitement PDF...")
        with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as temp_pdf:
            temp_pdf.write(test_pdf_content)
            temp_pdf_path = temp_pdf.name
        
        try:
            cleaned_pdf_path = optimizer._preprocess_pdf(temp_pdf_path)
            logger.info(f"‚úÖ Pr√©-traitement PDF r√©ussi: {cleaned_pdf_path}")
        finally:
            for path in [temp_pdf_path, cleaned_pdf_path]:
                if os.path.exists(path):
                    os.unlink(path)
        
        # Test de l'analyse de mise en page
        logger.info("üìä Test de l'analyse de mise en page...")
        metrics = optimizer._analyze_pdf_layout(test_pdf_content)
        logger.info(f"‚úÖ Analyse mise en page r√©ussie:")
        logger.info(f"   - Nombre de pages: {metrics.page_count}")
        logger.info(f"   - Nombre de blocs texte: {metrics.total_text_blocks}")
        logger.info(f"   - Taille moyenne police: {metrics.average_font_size:.2f}")
        logger.info(f"   - Nombre de polices diff√©rentes: {len(metrics.font_distribution)}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors des tests sp√©cifiques: {str(e)}")
        return False

if __name__ == "__main__":
    logger.info("üöÄ D√©marrage des tests d'optimisation de mise en page")
    
    # Test principal
    success_main = test_layout_optimizations()
    
    # Test des optimisations sp√©cifiques
    success_specific = test_specific_optimizations()
    
    if success_main and success_specific:
        logger.info("üéâ Tous les tests ont r√©ussi!")
        sys.exit(0)
    else:
        logger.error("‚ùå Certains tests ont √©chou√©")
        sys.exit(1) 