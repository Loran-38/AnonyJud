from fastapi import FastAPI, HTTPException, UploadFile, File, Form, Body
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import StreamingResponse
from pydantic import BaseModel
from typing import Dict, List, Any, Optional
import json
import os
import tempfile
from pathlib import Path
import fitz  # PyMuPDF pour les PDF
from docx import Document  # python-docx pour les fichiers Word
import io
from odf import text as odf_text, teletype
from odf.opendocument import load
import re # Added for regex in deanonymize_docx_file

from .anonymizer import anonymize_text
from .deanonymizer import deanonymize_text
from .models import TextAnonymizationRequest, TextDeanonymizationRequest

app = FastAPI()

# Configuration CORS pour permettre les requ√™tes depuis le frontend
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # En production, sp√©cifier l'origine exacte
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/")
def read_root():
    return {"message": "AnonyJud API is running"}

@app.post("/anonymize/text")
def anonymize_text_endpoint(request: TextAnonymizationRequest):
    """
    Anonymise un texte en utilisant les tiers fournis.
    """
    try:
        anonymized, mapping = anonymize_text(request.text, request.tiers)
        return {"anonymized_text": anonymized, "mapping": mapping}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/deanonymize/text")
def deanonymize_text_endpoint(request: TextDeanonymizationRequest):
    """
    D√©-anonymise un texte en utilisant le mapping fourni.
    """
    try:
        deanonymized = deanonymize_text(request.anonymized_text, request.mapping)
        return {"deanonymized_text": deanonymized}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/anonymize/file")
async def anonymize_file(
    file: UploadFile = File(...),
    tiers_json: str = Form(...)
):
    """
    Anonymise un fichier Word, PDF ou ODT en utilisant les tiers fournis.
    """
    try:
        # Convertir la cha√Æne JSON en liste de tiers
        tiers = json.loads(tiers_json)
        
        # V√©rifier le type de fichier
        filename = file.filename or ""
        file_extension = os.path.splitext(filename)[1].lower()
        
        if file_extension == ".pdf":
            # Traitement des fichiers PDF
            content = await file.read()
            pdf_text, mapping = extract_and_anonymize_pdf(content, tiers)
            return {"text": pdf_text, "mapping": mapping}
            
        elif file_extension in [".doc", ".docx"]:
            # Traitement des fichiers Word
            content = await file.read()
            doc_text, mapping = extract_and_anonymize_docx(content, tiers)
            return {"text": doc_text, "mapping": mapping}
            
        elif file_extension == ".odt":
            # Traitement des fichiers ODT (OpenDocument Text)
            content = await file.read()
            odt_text, mapping = extract_and_anonymize_odt(content, tiers)
            return {"text": odt_text, "mapping": mapping}
            
        else:
            raise HTTPException(status_code=400, detail="Format de fichier non support√©. Utilisez PDF, DOCX ou ODT.")
            
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

def detect_anonymized_patterns(text: str) -> Dict[str, str]:
    """
    D√©tecte automatiquement les patterns d'anonymisation dans un texte.
    Utilise les m√™mes patterns que l'anonymisation (NOM1, PRENOM1, etc.)
    Retourne un mapping des patterns d√©tect√©s.
    """
    import re
    
    print(f"üîç DETECT_ANONYMIZED_PATTERNS - D√©but de la d√©tection")
    print(f"üìù Texte √† analyser (premiers 500 chars): {text[:500]}...")
    
    mapping = {}
    
    # Patterns pour d√©tecter les champs anonymis√©s (m√™me format que l'anonymisation)
    patterns = [
        (r'\bNOM(\d+)\b', 'NOM'),
        (r'\bPRENOM(\d+)\b', 'PRENOM'),
        (r'\bADRESSE(\d+)\b', 'ADRESSE'),
        (r'\bNUMERO(\d+)\b', 'NUMERO'),
        (r'\bVOIE(\d+)\b', 'VOIE'),
        (r'\bCODEPOSTAL(\d+)\b', 'CODEPOSTAL'),
        (r'\bVILLE(\d+)\b', 'VILLE'),
        (r'\bTEL(\d+)\b', 'TEL'),
        (r'\bPORTABLE(\d+)\b', 'PORTABLE'),
        (r'\bEMAIL(\d+)\b', 'EMAIL'),
        (r'\bSOCIETE(\d+)\b', 'SOCIETE'),
        (r'\bPERSO(\d+)\b', 'PERSO'),
        # Patterns g√©n√©riques pour les champs personnalis√©s
        (r'\b([A-Z]+)(\d+)\b', 'CUSTOM'),
    ]
    
    # Chercher tous les patterns dans le texte
    for pattern, field_type in patterns:
        matches = re.findall(pattern, text, re.IGNORECASE)
        print(f"üîç Pattern '{pattern}' -> {len(matches)} correspondances trouv√©es")
        
        for match in matches:
            if field_type == 'CUSTOM':
                # Pour les patterns personnalis√©s, match est un tuple (prefix, number)
                prefix, number = match
                tag = f"{prefix.upper()}{number}"
            else:
                # Pour les patterns standards, match est juste le num√©ro
                number = match if isinstance(match, str) else match
                tag = f"{field_type}{number}"
            
            # Cr√©er un mapping de base (tag -> tag pour l'instant)
            # En r√©alit√©, nous n'avons pas les valeurs originales, donc on garde les tags
            mapping[tag] = tag
            print(f"‚úÖ Pattern d√©tect√©: '{tag}'")
    
    print(f"üìä Total des patterns d√©tect√©s: {len(mapping)}")
    print(f"üóÇÔ∏è Mapping g√©n√©r√©: {mapping}")
    print(f"üèÅ DETECT_ANONYMIZED_PATTERNS - Fin de la d√©tection")
    
    return mapping

def generate_mapping_from_tiers(tiers: List[Dict[str, Any]]) -> Dict[str, str]:
    """
    G√©n√®re le mapping d'anonymisation √† partir des tiers.
    Utilise la m√™me logique que l'anonymisation pour cr√©er les balises.
    """
    import re
    
    print(f"üîß GENERATE_MAPPING_FROM_TIERS - D√©but de la g√©n√©ration")
    print(f"üìä Nombre de tiers re√ßus: {len(tiers)}")
    
    mapping = {}
    
    for tier_index, tier in enumerate(tiers):
        # Utiliser le num√©ro fixe du tiers ou fallback sur l'index + 1
        tier_number = tier.get("numero", tier_index + 1)
        print(f"üîç Traitement du tiers {tier_number}: {tier}")
        
        # Traiter le nom
        if tier.get("nom"):
            nom = tier["nom"].strip()
            if nom and len(nom) > 1:
                tag = f"NOM{tier_number}"
                mapping[tag] = nom
                print(f"‚úÖ Ajout√©: {tag} -> {nom}")
        
        # Traiter le pr√©nom
        if tier.get("prenom"):
            prenom = tier["prenom"].strip()
            if prenom and len(prenom) > 1:
                tag = f"PRENOM{tier_number}"
                mapping[tag] = prenom
                print(f"‚úÖ Ajout√©: {tag} -> {prenom}")
        
        # Traiter les composants de l'adresse
        if tier.get("adresse_numero"):
            numero = tier["adresse_numero"].strip()
            if numero and len(numero) > 0:
                tag = f"NUMERO{tier_number}"
                mapping[tag] = numero
                print(f"‚úÖ Ajout√©: {tag} -> {numero}")
        
        if tier.get("adresse_voie"):
            voie = tier["adresse_voie"].strip()
            if voie and len(voie) > 2:
                tag = f"VOIE{tier_number}"
                mapping[tag] = voie
                print(f"‚úÖ Ajout√©: {tag} -> {voie}")
        
        if tier.get("adresse_code_postal"):
            code_postal = tier["adresse_code_postal"].strip()
            if code_postal and len(code_postal) > 0:
                tag = f"CODEPOSTAL{tier_number}"
                mapping[tag] = code_postal
                print(f"‚úÖ Ajout√©: {tag} -> {code_postal}")
        
        if tier.get("adresse_ville"):
            ville = tier["adresse_ville"].strip()
            if ville and len(ville) > 1:
                tag = f"VILLE{tier_number}"
                mapping[tag] = ville
                print(f"‚úÖ Ajout√©: {tag} -> {ville}")
        
        # Traiter l'adresse compl√®te (compatibilit√©)
        if tier.get("adresse"):
            adresse = tier["adresse"].strip()
            if adresse and len(adresse) > 5:
                tag = f"ADRESSE{tier_number}"
                mapping[tag] = adresse
                print(f"‚úÖ Ajout√©: {tag} -> {adresse}")
        
        # Traiter le t√©l√©phone
        if tier.get("telephone"):
            tel = tier["telephone"].strip()
            if tel and len(tel) > 5:
                tag = f"TEL{tier_number}"
                mapping[tag] = tel
                print(f"‚úÖ Ajout√©: {tag} -> {tel}")
        
        # Traiter le portable
        if tier.get("portable"):
            portable = tier["portable"].strip()
            if portable and len(portable) > 5:
                tag = f"PORTABLE{tier_number}"
                mapping[tag] = portable
                print(f"‚úÖ Ajout√©: {tag} -> {portable}")
        
        # Traiter l'email
        if tier.get("email"):
            email = tier["email"].strip()
            if email and '@' in email:
                tag = f"EMAIL{tier_number}"
                mapping[tag] = email
                print(f"‚úÖ Ajout√©: {tag} -> {email}")
        
        # Traiter la soci√©t√©
        if tier.get("societe"):
            societe = tier["societe"].strip()
            if societe and len(societe) > 1:
                tag = f"SOCIETE{tier_number}"
                mapping[tag] = societe
                print(f"‚úÖ Ajout√©: {tag} -> {societe}")
        
        # Traiter les champs personnalis√©s
        if tier.get("customFields") and isinstance(tier["customFields"], list):
            for custom_field in tier["customFields"]:
                if isinstance(custom_field, dict):
                    champ_value = custom_field.get("value")
                    champ_label = custom_field.get("label")
                    
                    if champ_value and isinstance(champ_value, str):
                        champ_value = champ_value.strip()
                        if champ_value and len(champ_value) > 1:
                            label_base = "PERSO"
                            if champ_label and isinstance(champ_label, str):
                                label_perso = champ_label.strip()
                                if label_perso:
                                    label_base = re.sub(r'[^A-Za-z]', '', label_perso.upper())
                                    if not label_base:
                                        label_base = "PERSO"
                            
                            tag = f"{label_base}{tier_number}"
                            mapping[tag] = champ_value
                            print(f"‚úÖ Ajout√©: {tag} -> {champ_value}")
        
        # Traiter le champ personnalis√© (ancien format)
        if tier.get("champPerso"):
            champ_perso = tier["champPerso"]
            if champ_perso and isinstance(champ_perso, str):
                champ_perso = champ_perso.strip()
                if champ_perso and len(champ_perso) > 1:
                    label_base = "PERSO"
                    if tier.get("labelChampPerso") and isinstance(tier["labelChampPerso"], str):
                        label_perso = tier["labelChampPerso"].strip()
                        if label_perso:
                            label_base = re.sub(r'[^A-Za-z]', '', label_perso.upper())
                            if not label_base:
                                label_base = "PERSO"
                    
                    tag = f"{label_base}{tier_number}"
                    mapping[tag] = champ_perso
                    print(f"‚úÖ Ajout√©: {tag} -> {champ_perso}")
    
    print(f"üèÅ GENERATE_MAPPING_FROM_TIERS - Mapping g√©n√©r√© avec {len(mapping)} √©l√©ments")
    print(f"üóÇÔ∏è Mapping final: {mapping}")
    return mapping

@app.post("/deanonymize/file")
async def deanonymize_file(
    file: UploadFile = File(...),
    mapping_json: str = Form(...),
    tiers_json: str = Form("[]"),
    has_mapping: str = Form("true")
):
    """
    D√©-anonymise un fichier Word, PDF ou ODT en utilisant le mapping fourni.
    Si le mapping est vide, essaie de d√©tecter automatiquement les patterns.
    """
    try:
        print(f"üöÄ DEANONYMIZE_FILE ENDPOINT - D√©but du traitement")
        print(f"üìÅ Fichier re√ßu: {file.filename}")
        print(f"üóÇÔ∏è Mapping JSON brut: {mapping_json}")
        print(f"üóÇÔ∏è Tiers JSON brut: {tiers_json}")
        print(f"üîÑ A mapping: {has_mapping}")
        
        # Convertir la cha√Æne JSON en mapping
        mapping = json.loads(mapping_json)
        tiers = json.loads(tiers_json)
        print(f"üóÇÔ∏è Mapping pars√©: {mapping}")
        print(f"üìä Nombre de balises dans le mapping: {len(mapping)}")
        print(f"üë• Nombre de tiers: {len(tiers)}")
        
        # V√©rifier le type de fichier
        filename = file.filename or ""
        file_extension = os.path.splitext(filename)[1].lower()
        print(f"üìÑ Extension du fichier: {file_extension}")
        
        # Lire le contenu du fichier
        content = await file.read()
        print(f"üì¶ Taille du fichier: {len(content)} bytes")
        
        # Si le mapping est vide, g√©n√©rer le mapping √† partir des tiers
        if has_mapping.lower() == "false" or not mapping or len(mapping) == 0:
            print(f"‚ö†Ô∏è Mapping vide d√©tect√©, g√©n√©ration √† partir des tiers...")
            if tiers and len(tiers) > 0:
                mapping = generate_mapping_from_tiers(tiers)
                print(f"üîß Mapping g√©n√©r√© √† partir des tiers: {mapping}")
            else:
                print(f"‚ùå Aucun tiers disponible pour g√©n√©rer le mapping")
                # Fallback: essayer de d√©tecter automatiquement
                print(f"üîç Tentative de d√©tection automatique...")
                # Extraire d'abord le texte pour d√©tecter les patterns
                if file_extension == ".pdf":
                    with fitz.open(stream=content, filetype="pdf") as pdf:
                        text = ""
                        for page in pdf:
                            text += page.get_text()
                elif file_extension in [".doc", ".docx"]:
                    doc = Document(io.BytesIO(content))
                    text = ""
                    for para in doc.paragraphs:
                        text += para.text + "\n"
                elif file_extension == ".odt":
                    with tempfile.NamedTemporaryFile(delete=False, suffix=".odt") as temp_file:
                        temp_file.write(content)
                        temp_path = temp_file.name
                    try:
                        doc = load(temp_path)
                        text = ""
                        for paragraph in doc.getElementsByType(odf_text.P):
                            text += teletype.extractText(paragraph) + "\n"
                    finally:
                        if os.path.exists(temp_path):
                            os.unlink(temp_path)
                else:
                    raise HTTPException(status_code=400, detail="Format de fichier non support√©. Utilisez PDF, DOCX ou ODT.")
                
                # D√©tecter les patterns anonymis√©s automatiquement
                mapping = detect_anonymized_patterns(text)
                print(f"üîç Patterns d√©tect√©s automatiquement: {mapping}")
                
                if not mapping:
                    print(f"‚ùå Aucun pattern d'anonymisation d√©tect√©")
                    return {"text": text, "mapping": {}, "message": "Aucun pattern d'anonymisation d√©tect√© dans le fichier"}
        
        print(f"üîÑ D√©but de la d√©sanonymisation avec mapping: {mapping}")
        
        # Proc√©der √† la d√©-anonymisation
        if file_extension == ".pdf":
            print(f"üìÑ Traitement PDF...")
            pdf_text = extract_and_deanonymize_pdf(content, mapping)
            print(f"‚úÖ PDF d√©sanonymis√© avec succ√®s")
            return {"text": pdf_text, "mapping": mapping}
            
        elif file_extension in [".doc", ".docx"]:
            print(f"üìÑ Traitement DOCX...")
            doc_text = extract_and_deanonymize_docx(content, mapping)
            print(f"‚úÖ DOCX d√©sanonymis√© avec succ√®s")
            return {"text": doc_text, "mapping": mapping}
            
        elif file_extension == ".odt":
            print(f"üìÑ Traitement ODT...")
            odt_text = extract_and_deanonymize_odt(content, mapping)
            print(f"‚úÖ ODT d√©sanonymis√© avec succ√®s")
            return {"text": odt_text, "mapping": mapping}
            
        else:
            raise HTTPException(status_code=400, detail="Format de fichier non support√©. Utilisez PDF, DOCX ou ODT.")
            
    except Exception as e:
        print(f"‚ùå Erreur dans deanonymize_file endpoint: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/anonymize/file/download")
async def anonymize_file_download(
    file: UploadFile = File(...),
    tiers_json: str = Form(...)
):
    """
    Anonymise un fichier Word et retourne le fichier modifi√© pour t√©l√©chargement.
    """
    try:
        # Convertir la cha√Æne JSON en liste de tiers
        tiers = json.loads(tiers_json)
        
        # V√©rifier le type de fichier
        filename = file.filename or ""
        file_extension = os.path.splitext(filename)[1].lower()
        
        if file_extension in [".doc", ".docx"]:
            # Traitement des fichiers Word
            content = await file.read()
            anonymized_file, mapping = anonymize_docx_file(content, tiers)
            
            # Cr√©er un nom de fichier pour le t√©l√©chargement
            base_name = os.path.splitext(filename)[0]
            anonymized_filename = f"{base_name}_ANONYM.docx"
            
            # Retourner le fichier modifi√©
            return StreamingResponse(
                io.BytesIO(anonymized_file),
                media_type="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                headers={"Content-Disposition": f"attachment; filename={anonymized_filename}"}
            )
        else:
            raise HTTPException(status_code=400, detail="Seuls les fichiers Word (.docx) sont support√©s pour le t√©l√©chargement.")
            
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/deanonymize/file/download")
async def deanonymize_file_download(
    file: UploadFile = File(...),
    mapping_json: str = Form(...)
):
    """
    D√©-anonymise un fichier Word et retourne le fichier modifi√© pour t√©l√©chargement.
    """
    try:
        # Convertir la cha√Æne JSON en mapping
        mapping = json.loads(mapping_json)
        
        # V√©rifier le type de fichier
        filename = file.filename or ""
        file_extension = os.path.splitext(filename)[1].lower()
        
        if file_extension in [".doc", ".docx"]:
            # Traitement des fichiers Word
            content = await file.read()
            deanonymized_file = deanonymize_docx_file(content, mapping)
            
            # Cr√©er un nom de fichier pour le t√©l√©chargement
            base_name = os.path.splitext(filename)[0]
            # Retirer "_ANONYM" du nom si pr√©sent
            if base_name.endswith("_ANONYM"):
                base_name = base_name[:-7]
            deanonymized_filename = f"{base_name}_DESANONYM.docx"
            
            # Retourner le fichier modifi√©
            return StreamingResponse(
                io.BytesIO(deanonymized_file),
                media_type="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                headers={"Content-Disposition": f"attachment; filename={deanonymized_filename}"}
            )
        else:
            raise HTTPException(status_code=400, detail="Seuls les fichiers Word (.docx) sont support√©s pour le t√©l√©chargement.")
            
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

def extract_and_anonymize_pdf(content: bytes, tiers: List[Dict[str, Any]]):
    """
    Extrait le texte d'un PDF et l'anonymise.
    """
    try:
        # Ouvrir le PDF depuis les bytes
        with fitz.open(stream=content, filetype="pdf") as pdf:
            text = ""
            # Extraire le texte de chaque page
            for page in pdf:
                text += page.get_text()
        
        # Anonymiser le texte extrait
        anonymized, mapping = anonymize_text(text, tiers)
        return anonymized, mapping
        
    except Exception as e:
        raise Exception(f"Erreur lors du traitement du PDF: {str(e)}")

def extract_and_anonymize_docx(content: bytes, tiers: List[Dict[str, Any]]):
    """
    Extrait le texte d'un document Word et l'anonymise.
    """
    try:
        # Ouvrir le document Word depuis les bytes
        doc = Document(io.BytesIO(content))
        text = ""
        
        # Extraire le texte de chaque paragraphe
        for para in doc.paragraphs:
            text += para.text + "\n"
            
        # Anonymiser le texte extrait
        anonymized, mapping = anonymize_text(text, tiers)
        return anonymized, mapping
        
    except Exception as e:
        raise Exception(f"Erreur lors du traitement du document Word: {str(e)}")

def extract_and_anonymize_odt(content: bytes, tiers: List[Dict[str, Any]]):
    """
    Extrait le texte d'un document OpenDocument Text (ODT) et l'anonymise.
    """
    try:
        # Cr√©er un fichier temporaire pour stocker le contenu ODT
        with tempfile.NamedTemporaryFile(delete=False, suffix=".odt") as temp_file:
            temp_file.write(content)
            temp_path = temp_file.name
        
        try:
            # Charger le document ODT
            doc = load(temp_path)
            
            # Extraire le texte du document
            text = ""
            
            # Parcourir tous les √©l√©ments de texte dans le document
            for paragraph in doc.getElementsByType(odf_text.P):
                text += teletype.extractText(paragraph) + "\n"
            
            # Anonymiser le texte extrait
            anonymized, mapping = anonymize_text(text, tiers)
            
            return anonymized, mapping
            
        finally:
            # Supprimer le fichier temporaire
            if os.path.exists(temp_path):
                os.unlink(temp_path)
        
    except Exception as e:
        raise Exception(f"Erreur lors du traitement du document ODT: {str(e)}") 

def anonymize_docx_file(content: bytes, tiers: List[Dict[str, Any]]):
    """
    Anonymise directement un fichier Word en modifiant son contenu.
    Retourne le fichier modifi√© et le mapping d'anonymisation.
    """
    try:
        print(f"DEBUG: D√©but anonymize_docx_file avec {len(tiers)} tiers")
        
        # Ouvrir le document Word depuis les bytes
        doc = Document(io.BytesIO(content))
        
        # Collecter tout le texte du document
        full_text = ""
        for para in doc.paragraphs:
            full_text += para.text + "\n"
        
        print(f"DEBUG: Texte extrait (premiers 200 chars): {full_text[:200]}...")
        
        # Anonymiser le texte complet pour obtenir le mapping
        anonymized_text, mapping = anonymize_text(full_text, tiers)
        
        print(f"DEBUG: Mapping g√©n√©r√©: {mapping}")
        print(f"DEBUG: Texte anonymis√© (premiers 200 chars): {anonymized_text[:200]}...")
        
        # Appliquer les anonymisations directement dans le document
        for para in doc.paragraphs:
            if para.text.strip():  # Seulement pour les paragraphes non vides
                original_text = para.text
                modified_text = original_text
                
                # Appliquer chaque remplacement du mapping (inverser pour que les tags remplacent les originaux)
                for tag, original_value in mapping.items():
                    modified_text = modified_text.replace(original_value, tag)
                
                # Remplacer le texte du paragraphe seulement si modifi√©
                if modified_text != original_text:
                    print(f"DEBUG: Paragraphe modifi√©: '{original_text}' -> '{modified_text}'")
                    para.clear()
                    para.add_run(modified_text)
        
        # Traiter √©galement les tableaux
        for table in doc.tables:
            for row in table.rows:
                for cell in row.cells:
                    for para in cell.paragraphs:
                        if para.text.strip():
                            original_text = para.text
                            modified_text = original_text
                            
                            # Appliquer chaque remplacement du mapping
                            for tag, original_value in mapping.items():
                                modified_text = modified_text.replace(original_value, tag)
                            
                            # Remplacer le texte du paragraphe seulement si modifi√©
                            if modified_text != original_text:
                                print(f"DEBUG: Cellule modifi√©e: '{original_text}' -> '{modified_text}'")
                                para.clear()
                                para.add_run(modified_text)
        
        # Sauvegarder le document modifi√© en bytes
        output = io.BytesIO()
        doc.save(output)
        output.seek(0)
        
        print(f"DEBUG: Fichier anonymis√© g√©n√©r√© avec succ√®s")
        return output.getvalue(), mapping
        
    except Exception as e:
        print(f"DEBUG: Erreur dans anonymize_docx_file: {str(e)}")
        raise Exception(f"Erreur lors de l'anonymisation du fichier Word: {str(e)}")

def deanonymize_docx_file(content: bytes, mapping: Dict[str, str]):
    """
    D√©-anonymise directement un fichier Word en utilisant le mapping fourni.
    Retourne le fichier modifi√©.
    """
    try:
        print(f"üîç DEANONYMIZE_DOCX_FILE - D√©but du processus")
        print(f"üóÇÔ∏è Mapping re√ßu: {mapping}")
        print(f"üìä Nombre de balises dans le mapping: {len(mapping)}")
        
        # Ouvrir le document Word depuis les bytes
        doc = Document(io.BytesIO(content))
        
        # Extraire tout le texte du document pour analyse
        full_text = ""
        for para in doc.paragraphs:
            full_text += para.text + "\n"
        for table in doc.tables:
            for row in table.rows:
                for cell in row.cells:
                    for para in cell.paragraphs:
                        full_text += para.text + "\n"
        
        print(f"üìù Texte extrait du document (premiers 300 chars): {full_text[:300]}...")
        
        # Analyser quelles balises sont pr√©sentes dans le texte
        found_tags = []
        for tag in mapping.keys():
            if tag in full_text:
                found_tags.append(tag)
                print(f"‚úÖ Balise '{tag}' trouv√©e dans le document")
            else:
                print(f"‚ùå Balise '{tag}' NON trouv√©e dans le document")
        
        print(f"üìã R√©sum√©: {len(found_tags)}/{len(mapping)} balises trouv√©es: {found_tags}")
        
        # Le mapping est d√©j√† dans le bon sens (balise -> valeur_originale)
        # Pas besoin d'inverser car generate_mapping_from_tiers() cr√©e d√©j√† le mapping correct
        print(f"üîÑ Mapping re√ßu (balise -> valeur): {mapping}")
        
        # V√©rifier si le mapping est dans le bon sens
        sample_key = list(mapping.keys())[0] if mapping else ""
        if sample_key and not sample_key.isupper():
            # Le mapping semble √™tre dans le mauvais sens (valeur -> balise), l'inverser
            reverse_mapping = {v: k for k, v in mapping.items()}
            print(f"üîÑ Mapping invers√© car dans le mauvais sens: {reverse_mapping}")
        else:
            # Le mapping est dans le bon sens (balise -> valeur)
            reverse_mapping = mapping
            print(f"üîÑ Mapping utilis√© tel quel: {reverse_mapping}")
        
        # Trier les balises par longueur d√©croissante pour √©viter les remplacements partiels
        sorted_tags = sorted(reverse_mapping.keys(), key=len, reverse=True)
        print(f"üî¢ Balises tri√©es par longueur: {sorted_tags}")
        
        paragraphs_modified = 0
        cells_modified = 0
        
        # Appliquer les d√©-anonymisations dans les paragraphes
        for i, para in enumerate(doc.paragraphs):
            if para.text.strip():  # Seulement pour les paragraphes non vides
                original_text = para.text
                modified_text = original_text
                
                # Appliquer chaque remplacement du mapping (balise -> valeur originale)
                # Utiliser la m√™me logique que deanonymize_text avec des mots entiers
                for balise in sorted_tags:
                    valeur_originale = reverse_mapping[balise]
                    if balise in modified_text:
                        count_before = modified_text.count(balise)
                        
                        # Utiliser une expression r√©guli√®re pour remplacer la balise exacte (pas de remplacement partiel)
                        pattern = re.compile(r'\b' + re.escape(balise) + r'\b')
                        modified_text_new = pattern.sub(valeur_originale, modified_text)
                        
                        count_after = modified_text_new.count(balise)
                        actual_replacements = count_before - count_after
                        
                        if actual_replacements > 0:
                            print(f"‚úÖ Paragraphe {i}: {actual_replacements} occurrence(s) de '{balise}' remplac√©e(s) par '{valeur_originale}'")
                            modified_text = modified_text_new
                        else:
                            print(f"‚ö†Ô∏è Paragraphe {i}: Aucun remplacement de mot entier pour '{balise}', tentative de remplacement simple")
                            # Fallback: remplacement simple si le pattern de mot entier ne fonctionne pas
                            if balise in modified_text:
                                modified_text = modified_text.replace(balise, valeur_originale)
                                print(f"üîÑ Paragraphe {i}: Remplacement simple effectu√© pour '{balise}'")
                
                # Remplacer le texte du paragraphe seulement si modifi√©
                if modified_text != original_text:
                    print(f"üìù Paragraphe {i} modifi√©: '{original_text}' -> '{modified_text}'")
                    para.clear()
                    para.add_run(modified_text)
                    paragraphs_modified += 1
        
        # Traiter √©galement les tableaux
        for table_idx, table in enumerate(doc.tables):
            for row_idx, row in enumerate(table.rows):
                for cell_idx, cell in enumerate(row.cells):
                    for para_idx, para in enumerate(cell.paragraphs):
                        if para.text.strip():
                            original_text = para.text
                            modified_text = original_text
                            
                            # Appliquer chaque remplacement du mapping (balise -> valeur originale)
                            # Utiliser la m√™me logique que deanonymize_text avec des mots entiers
                            for balise in sorted_tags:
                                valeur_originale = reverse_mapping[balise]
                                if balise in modified_text:
                                    count_before = modified_text.count(balise)
                                    
                                    # Utiliser une expression r√©guli√®re pour remplacer la balise exacte (pas de remplacement partiel)
                                    pattern = re.compile(r'\b' + re.escape(balise) + r'\b')
                                    modified_text_new = pattern.sub(valeur_originale, modified_text)
                                    
                                    count_after = modified_text_new.count(balise)
                                    actual_replacements = count_before - count_after
                                    
                                    if actual_replacements > 0:
                                        print(f"‚úÖ Tableau {table_idx}, Ligne {row_idx}, Cellule {cell_idx}: {actual_replacements} occurrence(s) de '{balise}' remplac√©e(s) par '{valeur_originale}'")
                                        modified_text = modified_text_new
                                    else:
                                        print(f"‚ö†Ô∏è Tableau {table_idx}, Ligne {row_idx}, Cellule {cell_idx}: Aucun remplacement de mot entier pour '{balise}', tentative de remplacement simple")
                                        # Fallback: remplacement simple si le pattern de mot entier ne fonctionne pas
                                        if balise in modified_text:
                                            modified_text = modified_text.replace(balise, valeur_originale)
                                            print(f"üîÑ Tableau {table_idx}, Ligne {row_idx}, Cellule {cell_idx}: Remplacement simple effectu√© pour '{balise}'")
                            
                            # Remplacer le texte du paragraphe seulement si modifi√©
                            if modified_text != original_text:
                                print(f"üìù Cellule [{table_idx},{row_idx},{cell_idx}] modifi√©e: '{original_text}' -> '{modified_text}'")
                                para.clear()
                                para.add_run(modified_text)
                                cells_modified += 1
        
        print(f"üìà R√©sultats: {paragraphs_modified} paragraphes et {cells_modified} cellules modifi√©s")
        
        # Sauvegarder le document modifi√© en bytes
        output = io.BytesIO()
        doc.save(output)
        output.seek(0)
        
        print(f"üèÅ DEANONYMIZE_DOCX_FILE - Fichier modifi√© g√©n√©r√© avec succ√®s")
        return output.getvalue()
        
    except Exception as e:
        print(f"‚ùå Erreur dans deanonymize_docx_file: {str(e)}")
        raise Exception(f"Erreur lors de la d√©-anonymisation du fichier Word: {str(e)}") 

def extract_and_deanonymize_pdf(content: bytes, mapping: Dict[str, str]):
    """
    Extrait le texte d'un PDF et le d√©-anonymise.
    """
    try:
        # Ouvrir le PDF depuis les bytes
        with fitz.open(stream=content, filetype="pdf") as pdf:
            text = ""
            # Extraire le texte de chaque page
            for page in pdf:
                text += page.get_text()
        
        # D√©-anonymiser le texte extrait
        deanonymized = deanonymize_text(text, mapping)
        return deanonymized
        
    except Exception as e:
        raise Exception(f"Erreur lors du traitement du PDF: {str(e)}")

def extract_and_deanonymize_docx(content: bytes, mapping: Dict[str, str]):
    """
    Extrait le texte d'un document Word et le d√©-anonymise.
    """
    try:
        print(f"üîç EXTRACT_AND_DEANONYMIZE_DOCX - D√©but du processus")
        print(f"üóÇÔ∏è Mapping re√ßu: {mapping}")
        
        # Ouvrir le document Word depuis les bytes
        doc = Document(io.BytesIO(content))
        text = ""
        
        # Extraire le texte de chaque paragraphe
        paragraph_count = 0
        for para in doc.paragraphs:
            if para.text.strip():
                text += para.text + "\n"
                paragraph_count += 1
        
        # Extraire le texte des tableaux aussi
        table_count = 0
        for table in doc.tables:
            for row in table.rows:
                for cell in row.cells:
                    for para in cell.paragraphs:
                        if para.text.strip():
                            text += para.text + "\n"
                            table_count += 1
        
        print(f"üìù Texte extrait: {paragraph_count} paragraphes, {table_count} cellules de tableau")
        print(f"üìù Texte complet (premiers 300 chars): {text[:300]}...")
        print(f"üìä Longueur totale du texte: {len(text)} caract√®res")
            
        # D√©-anonymiser le texte extrait
        print(f"üîÑ Appel de deanonymize_text...")
        deanonymized = deanonymize_text(text, mapping)
        print(f"‚úÖ D√©sanonymisation termin√©e")
        
        return deanonymized
        
    except Exception as e:
        print(f"‚ùå Erreur dans extract_and_deanonymize_docx: {str(e)}")
        raise Exception(f"Erreur lors du traitement du document Word: {str(e)}")

def extract_and_deanonymize_odt(content: bytes, mapping: Dict[str, str]):
    """
    Extrait le texte d'un document OpenDocument Text (ODT) et le d√©-anonymise.
    """
    try:
        # Cr√©er un fichier temporaire pour stocker le contenu ODT
        with tempfile.NamedTemporaryFile(delete=False, suffix=".odt") as temp_file:
            temp_file.write(content)
            temp_path = temp_file.name
        
        try:
            # Charger le document ODT
            doc = load(temp_path)
            
            # Extraire le texte du document
            text = ""
            
            # Parcourir tous les √©l√©ments de texte dans le document
            for paragraph in doc.getElementsByType(odf_text.P):
                text += teletype.extractText(paragraph) + "\n"
            
            # D√©-anonymiser le texte extrait
            deanonymized = deanonymize_text(text, mapping)
            
            return deanonymized
            
        finally:
            # Supprimer le fichier temporaire
            if os.path.exists(temp_path):
                os.unlink(temp_path)
        
    except Exception as e:
        raise Exception(f"Erreur lors du traitement du document ODT: {str(e)}") 